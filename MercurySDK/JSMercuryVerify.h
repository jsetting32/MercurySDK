//
//  JSMercuryVerify.h
//  MercurySDK
//
//  Created by John Setting on 4/19/16.
//  Copyright © 2016 John Setting. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "JSMercuryTypeDef.h"
#import "HCMercuryHelper.h"

@interface JSMercuryVerify : NSObject <HCMercuryHelperDelegate>

- (nullable instancetype)initWithResponse:(nullable NSDictionary *)response;

@property (strong, nonatomic, nonnull) kJSMercuryObjectBlock completionBlock;

// The name on the card
@property (strong, nonatomic, nonnull) NSString *cardHolderName;

// The type of card used to make the payment.
@property (strong, nonatomic, nonnull) NSString *cardType;

// VIP’s Recommended message to display to the end user. The eCommerce web site developer can use this message or display own message.
@property (strong, nonatomic, nonnull) NSString *displayMessage;

/*
 * Expiration date of card used. Can be stored in instances where card-on-file or recurring billing is being utilized and
 * merchant desires to remind cardholder to update card information when expiration date approaches.
 * ☞ Note Expiration date cannot be printed on receipts or used in correspondence with card holder.
 * Expiration date on receipts should be masked with X’s, such as XXXX or XX/XX.
 */
@property (strong, nonatomic, nonnull) NSDate *expDate;

// Masked credit card number. (e.g.,: xxxxxxxx6781)
@property (strong, nonatomic, nonnull) NSString *maskedAccount;

/*
 * A Code indicating the result of the transaction (See associated Status):
 * 0 – Success
 * 100 – AuthFail (bad password or id)
 * 200 – VIP Internal Error. Specific error will be logged in VIP’s internal error log.
 * 300 – Validation failure – one of the request parameters was either missing or invalid.
 */
@property (strong, nonatomic, nonnull) NSNumber *responseCode;

/*
 * The Status of the transaction.
 * Values: Approved, Declined, Error, Invalid, AuthFail, MPSError.
 * If ResponseCode = 0
 * Approved: The transaction was approved.
 * Declined: The transaction was declined.
 * Blank: The payment has not been processed at the time the method was called.
 * Error: Indicates an error from the transaction processing host.
 * Invalid: Indicates that the user entered invalid card data too many times and was therefore redirected back to the Merchants eCommerce site.
 * If ResponseCode = 100
 * AuthFail: The authorization failed for the given MerchantID and Password
 * If ResponseCode =200
 * MPSError: An internal error has occurred.
 */
@property (strong, nonatomic, nonnull) NSString *status;

// The textual description of the status. This should not be displayed to the end user.
// Use DisplayMessage instead.
@property (strong, nonatomic, nonnull) NSString *statusMessage;

// The token generated by the transaction that replaces the credit card #. Can be used in subsequent
// transactions such as CreditPreAuthCaptureToken.
@property (strong, nonatomic, nonnull) NSString *token;

// Payment: PreAuth or Sale
// CardInfo: CardLookup
@property (strong, nonatomic, nonnull) NSString *tranType;

@end
